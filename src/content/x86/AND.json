{"name":"AND","href":"/x86/and","description":"Logical AND","instructionTypes":[{"opCode":"24 ib","instruction":"AND AL, imm8","operatorEncoding":"I","supports64BitMode":"Valid","supportsCompatMode":"Valid","description":"AL AND imm8."},{"opCode":"25 iw","instruction":"AND AX, imm16","operatorEncoding":"I","supports64BitMode":"Valid","supportsCompatMode":"Valid","description":"AX AND imm16."},{"opCode":"25 id","instruction":"AND EAX, imm32","operatorEncoding":"I","supports64BitMode":"Valid","supportsCompatMode":"Valid","description":"EAX AND imm32."},{"opCode":"REX.W + 25 id","instruction":"AND RAX, imm32","operatorEncoding":"I","supports64BitMode":"Valid","supportsCompatMode":"N.E.","description":"RAX AND imm32 sign-extended to 64-bits."}],"instructionOperandEncodings":[{"operatorEncoding":"RM","operand1":"ModRM:reg (r, w)","operand2":"ModRM:r/m (r)","operand3":"N/A","operand4":"N/A"}],"longDescription":"Performs a bitwise AND operation on the destination (first) and source (second) operands and stores the result in the destination operand location. The source operand can be an immediate, a register, or a memory location; the destination operand can be a register or a memory location. (However, two memory operands cannot be used in one instruction.) Each bit of the result is set to 1 if both corresponding bits of the first and second operands are 1; otherwise, it is set to 0.\n\nThis instruction can be used with a LOCK prefix to allow the it to be executed atomically.\n\nIn 64-bit mode, the instructionâ€™s default operation size is 32 bits. Using a REX prefix in the form of REX.R permits access to additional registers (R8-R15). Using a REX prefix in the form of REX.W promotes operation to 64 bits. See the summary chart at the beginning of this section for encoding data and limits.\n\n","operation":"DEST := DEST AND SRC;\n","flagsAffected":"The OF and CF flags are cleared; the SF, ZF, and PF flags are set according to the result. The state of the AF flag is undefined.","protectedModeExceptions":"\n<tbody><tr>\n<td rowspan=\"3\">#GP(0)</td>\n<td>If the destination operand points to a non-writable segment.</td></tr>\n<tr>\n<td>If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.</td></tr>\n<tr>\n<td>If the DS, ES, FS, or GS register contains a NULL segment selector.</td></tr>\n<tr>\n<td>#SS(0)</td>\n<td>If a memory operand effective address is outside the SS segment limit.</td></tr>\n<tr>\n<td>#PF(fault-code)</td>\n<td>If a page fault occurs.</td></tr>\n<tr>\n<td>#AC(0)</td>\n<td>If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.</td></tr>\n<tr>\n<td>#UD</td>\n<td>If the LOCK prefix is used but the destination is not a memory operand.</td></tr></tbody>","realAddressModeExceptions":"\n<tbody><tr>\n<td>#GP</td>\n<td>If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.</td></tr>\n<tr>\n<td>#SS</td>\n<td>If a memory operand effective address is outside the SS segment limit.</td></tr>\n<tr>\n<td>#UD</td>\n<td>If the LOCK prefix is used but the destination is not a memory operand.</td></tr></tbody>","virtual8086ModeExceptions":"\n<tbody><tr>\n<td>#GP(0)</td>\n<td>If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.</td></tr>\n<tr>\n<td>#SS(0)</td>\n<td>If a memory operand effective address is outside the SS segment limit.</td></tr>\n<tr>\n<td>#PF(fault-code)</td>\n<td>If a page fault occurs.</td></tr>\n<tr>\n<td>#AC(0)</td>\n<td>If alignment checking is enabled and an unaligned memory reference is made.</td></tr>\n<tr>\n<td>#UD</td>\n<td>If the LOCK prefix is used but the destination is not a memory operand.</td></tr></tbody>","compatibilityModeExceptions":null,"mode64BitExceptions":"\n<tbody><tr>\n<td>#SS(0)</td>\n<td>If a memory address referencing the SS segment is in a non-canonical form.</td></tr>\n<tr>\n<td>#GP(0)</td>\n<td>If the memory address is in a non-canonical form.</td></tr>\n<tr>\n<td>#PF(fault-code)</td>\n<td>If a page fault occurs.</td></tr>\n<tr>\n<td>#AC(0)</td>\n<td>If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.</td></tr>\n<tr>\n<td>#UD</td>\n<td>If the LOCK prefix is used but the destination is not a memory operand.</td></tr></tbody>"}